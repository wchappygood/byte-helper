<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="Checker">
    <!--编码字符集-->
    <property name="charset" value="UTF-8"/>

    <property name="severity" value="error"/>

    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <!--
        Regexp检查：正则表达式
    -->
    <module name="RegexpSingleline">
        <property name="format" value="System\.out\.println"/>
        <property name="message" value="Prohibit invoking System.out.println in source code !"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="printStacktrace"/>
        <property name="message" value="Prohibit invoking printStacktrace in source code !"/>
    </module>

    <!--
        LineLength
    -->
    <module name="LineLength">
        <property name="max" value="120"/>
    </module>

    <!--检查项规则配置-->
    <module name="TreeWalker">
        <!--
            Annotation检查：
                AnnotationLocation:注解规范
                AnnotationOnSameLine:注解同行规范
                AnnotationUseStyle：注解风格检查
        -->
        <module name="MissingOverride"/>

        <!--
            Block 检查：
                AvoidNestedBlocks: 内嵌代码块检查
                EmptyBlock:
                EmptyCatchBlock:
                LeftCurly: 左花括号检查
                RightCurly: 右花括号检查
                NeedBraces: if (obj.isValid()) return true; // OK
        -->
        
        <!--
            Class设计检查：
                DesignForExtension:
                OneTopLevelClass:
                InterfaceIsType:
                InnerTypeLast:
                HideUtilityClassConstructor:
                FinalClass:
                ThrowsCount:
                VisibilityModifier:
        -->
        
        <!--
            coding检查：
                ArrayTrailingComma：
                AvoidInlineConditionals：
                CovariantEquals：
                DeclarationOrder：
                DefaultComesLast：
                EmptyStatement：
                EqualsAvoidNull：
                EqualsHashCode：
                ExplicitInitialization：
                FallThrough：
                FinalLocalVariable：
                HiddenField:
                MissingSwitchDefault:
                MissingCtor:
                MagicNumber:
                ModifiedControlVariable:
                MultipleVariableDeclarations:
                NestedForDepth:
                NestedIfDepth：
                NestedTryDepth:
                NoFinalizer:
                OneStatementPerLine:
                OverloadMethodsDeclarationOrder:
                PackageDeclaration:
                ParameterAssignment:
                ReturnCount:
                VariableDeclarationUsageDistance:
        -->
        <module name="EqualsHashCode"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="OneStatementPerLine"/>
        <module name="UnnecessaryParentheses"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="DefaultComesLast"/>
        <module name="EmptyStatement"/>

        <!--
            Import检查：
                AvoidStarImport：
                AvoidStaticImport：
                CustomImportOrder：
                RedundantImport：
                UnusedImports：
        -->
        <module name="UnusedImports"/>
        <module name="RedundantImport"/>
        <module name="AvoidStarImport"/>

        <!--
            Javadoc检查：
                AtclauseOrder：
                JavadocMethod：
                JavadocTagContinuationIndentation：
                JavadocParagraph：
                JavadocPackage：
                JavadocType：
                JavadocVariable:
                NonEmptyAtclauseDescription：
                SingleLineJavadoc：
                SummaryJavadoc：
        -->
        <module name="NonEmptyAtclauseDescription"/>

        <!--
            Miscellaneous检查：
        -->
        <module name="UpperEll"/>

        <!--
            命名检查
        -->
        <module name="ConstantName">
            <property name="format" value="(^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$)"/>
        </module>
        <module name="LocalVariableName"/>
        <module name="LocalFinalVariableName"/>
        <module name="MemberName"/>
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$)"/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$)"/>
        </module>
        <module name="PackageName">
          <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
          <message key="name.invalidPattern"
                 value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterName"/>
        <module name="StaticVariableName">
            <property name="format" value="(^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$)"/>
        </module>
        <module name="TypeName">
            <property name="format" value="(^[A-Z][a-zA-Z0-9]*$)|(^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$)"/>
        </module>

        <!--
            Size检查：是解决可读性
                方法体大小、文件大小等
        -->

        <!--
            空格检查
                该检查是为了增加代码的可读性、可维护性
        -->
        <module name="GenericWhitespace"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>
        <module name="MethodParamPad"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
        </module>

    </module>
</module>
